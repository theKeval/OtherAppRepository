// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   	ViewModel.tt
// Version:		2.0
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Input;
using Controls = WPAppStudio.Controls;
using Entities = WPAppStudio.Entities;
using EntitiesBase = WPAppStudio.Entities.Base;
using IServices = WPAppStudio.Services.Interfaces;
using IViewModels = WPAppStudio.ViewModel.Interfaces;
using Localization = WPAppStudio.Localization;
using Repositories = WPAppStudio.Repositories;
using Services = WPAppStudio.Services;
using ViewModelsBase = WPAppStudio.ViewModel.Base;
using WPAppStudio;
using WPAppStudio.Shared;

namespace WPAppStudio.ViewModel
{
    /// <summary>
    /// Implementation of Microsoft_DetailVideos ViewModel.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public partial class Microsoft_DetailVideosViewModel : ViewModelsBase.VMBase, IViewModels.IMicrosoft_DetailVideosViewModel, ViewModelsBase.INavigable
    {       

		private readonly Repositories.Microsoft_microsoftvideos _microsoft_microsoftvideos;
		private readonly IServices.IDialogService _dialogService;
		private readonly IServices.INavigationService _navigationService;
		private readonly IServices.ISpeechService _speechService;
		private readonly IServices.IShareService _shareService;
		private readonly IServices.ILiveTileService _liveTileService;
		
        /// <summary>
        /// Initializes a new instance of the <see cref="Microsoft_DetailVideosViewModel" /> class.
        /// </summary>
        /// <param name="microsoft_microsoftvideos">The Microsoft_microsoftvideos.</param>
        /// <param name="dialogService">The Dialog Service.</param>
        /// <param name="navigationService">The Navigation Service.</param>
        /// <param name="speechService">The Speech Service.</param>
        /// <param name="shareService">The Share Service.</param>
        /// <param name="liveTileService">The Live Tile Service.</param>
        public Microsoft_DetailVideosViewModel(Repositories.Microsoft_microsoftvideos microsoft_microsoftvideos, IServices.IDialogService dialogService, IServices.INavigationService navigationService, IServices.ISpeechService speechService, IServices.IShareService shareService, IServices.ILiveTileService liveTileService)
        {
			_microsoft_microsoftvideos = microsoft_microsoftvideos;
			_dialogService = dialogService;
			_navigationService = navigationService;
			_speechService = speechService;
			_shareService = shareService;
			_liveTileService = liveTileService;
        }
		
	
		private EntitiesBase.YouTubeVideo _currentYouTubeVideo;

        /// <summary>
        /// CurrentYouTubeVideo property.
        /// </summary>		
        public EntitiesBase.YouTubeVideo CurrentYouTubeVideo
        {
            get
            {
				return _currentYouTubeVideo;
            }
            set
            {
                SetProperty(ref _currentYouTubeVideo, value);
            }
        }
	
		private bool _hasNextpanoramaMicrosoft_DetailVideos0;

        /// <summary>
        /// HasNextpanoramaMicrosoft_DetailVideos0 property.
        /// </summary>		
        public bool HasNextpanoramaMicrosoft_DetailVideos0
        {
            get
            {
				return _hasNextpanoramaMicrosoft_DetailVideos0;
            }
            set
            {
                SetProperty(ref _hasNextpanoramaMicrosoft_DetailVideos0, value);
            }
        }
	
		private bool _hasPreviouspanoramaMicrosoft_DetailVideos0;

        /// <summary>
        /// HasPreviouspanoramaMicrosoft_DetailVideos0 property.
        /// </summary>		
        public bool HasPreviouspanoramaMicrosoft_DetailVideos0
        {
            get
            {
				return _hasPreviouspanoramaMicrosoft_DetailVideos0;
            }
            set
            {
                SetProperty(ref _hasPreviouspanoramaMicrosoft_DetailVideos0, value);
            }
        }

        /// <summary>
        /// Delegate method for the TextToSpeechMicrosoft_DetailVideosStaticControlCommand command.
        /// </summary>
        public  void TextToSpeechMicrosoft_DetailVideosStaticControlCommandDelegate() 
        {
				_speechService.TextToSpeech(CurrentYouTubeVideo.Title + " " + CurrentYouTubeVideo.Summary);
        }
		

        private ICommand _textToSpeechMicrosoft_DetailVideosStaticControlCommand;

        /// <summary>
        /// Gets the TextToSpeechMicrosoft_DetailVideosStaticControlCommand command.
        /// </summary>
        public ICommand TextToSpeechMicrosoft_DetailVideosStaticControlCommand
        {
            get { return _textToSpeechMicrosoft_DetailVideosStaticControlCommand = _textToSpeechMicrosoft_DetailVideosStaticControlCommand ?? new ViewModelsBase.DelegateCommand(TextToSpeechMicrosoft_DetailVideosStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the ShareMicrosoft_DetailVideosStaticControlCommand command.
        /// </summary>
        public  void ShareMicrosoft_DetailVideosStaticControlCommandDelegate() 
        {
				_shareService.Share(CurrentYouTubeVideo.Title, CurrentYouTubeVideo.Summary, CurrentYouTubeVideo.ExternalUrl, CurrentYouTubeVideo.VideoId);
        }
		

        private ICommand _shareMicrosoft_DetailVideosStaticControlCommand;

        /// <summary>
        /// Gets the ShareMicrosoft_DetailVideosStaticControlCommand command.
        /// </summary>
        public ICommand ShareMicrosoft_DetailVideosStaticControlCommand
        {
            get { return _shareMicrosoft_DetailVideosStaticControlCommand = _shareMicrosoft_DetailVideosStaticControlCommand ?? new ViewModelsBase.DelegateCommand(ShareMicrosoft_DetailVideosStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the PinToStartMicrosoft_DetailVideosStaticControlCommand command.
        /// </summary>
        public  void PinToStartMicrosoft_DetailVideosStaticControlCommandDelegate() 
        {
				_liveTileService.PinToStart(typeof(IViewModels.IMicrosoft_DetailVideosViewModel), CreateTileInfoMicrosoft_DetailVideosStaticControl());
        }
		

        private ICommand _pinToStartMicrosoft_DetailVideosStaticControlCommand;

        /// <summary>
        /// Gets the PinToStartMicrosoft_DetailVideosStaticControlCommand command.
        /// </summary>
        public ICommand PinToStartMicrosoft_DetailVideosStaticControlCommand
        {
            get { return _pinToStartMicrosoft_DetailVideosStaticControlCommand = _pinToStartMicrosoft_DetailVideosStaticControlCommand ?? new ViewModelsBase.DelegateCommand(PinToStartMicrosoft_DetailVideosStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the GoToSourceMicrosoft_DetailVideosStaticControlCommand command.
        /// </summary>
        public  void GoToSourceMicrosoft_DetailVideosStaticControlCommandDelegate() 
        {
				_navigationService.NavigateTo(string.IsNullOrEmpty(CurrentYouTubeVideo.ExternalUrl) ? null : new Uri(CurrentYouTubeVideo.ExternalUrl));
        }
		

        private ICommand _goToSourceMicrosoft_DetailVideosStaticControlCommand;

        /// <summary>
        /// Gets the GoToSourceMicrosoft_DetailVideosStaticControlCommand command.
        /// </summary>
        public ICommand GoToSourceMicrosoft_DetailVideosStaticControlCommand
        {
            get { return _goToSourceMicrosoft_DetailVideosStaticControlCommand = _goToSourceMicrosoft_DetailVideosStaticControlCommand ?? new ViewModelsBase.DelegateCommand(GoToSourceMicrosoft_DetailVideosStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the NextpanoramaMicrosoft_DetailVideos0 command.
        /// </summary>
        public async void NextpanoramaMicrosoft_DetailVideos0Delegate() 
        {
				LoadingCurrentYouTubeVideo = true;
			var next = await  _microsoft_microsoftvideos.Next(CurrentYouTubeVideo);

			if(next != null)
				CurrentYouTubeVideo = next;

			RefreshHasPrevNext();
        }
		
		
        private bool _loadingCurrentYouTubeVideo;
		
        public bool LoadingCurrentYouTubeVideo
        {
            get { return _loadingCurrentYouTubeVideo; }
            set { SetProperty(ref _loadingCurrentYouTubeVideo, value); }
        }

        private ICommand _nextpanoramaMicrosoft_DetailVideos0;

        /// <summary>
        /// Gets the NextpanoramaMicrosoft_DetailVideos0 command.
        /// </summary>
        public ICommand NextpanoramaMicrosoft_DetailVideos0
        {
            get { return _nextpanoramaMicrosoft_DetailVideos0 = _nextpanoramaMicrosoft_DetailVideos0 ?? new ViewModelsBase.DelegateCommand(NextpanoramaMicrosoft_DetailVideos0Delegate); }
        }

        /// <summary>
        /// Delegate method for the PreviouspanoramaMicrosoft_DetailVideos0 command.
        /// </summary>
        public  void PreviouspanoramaMicrosoft_DetailVideos0Delegate() 
        {
			var prev =  _microsoft_microsoftvideos.Previous(CurrentYouTubeVideo);

			if(prev != null)
				CurrentYouTubeVideo = prev;

			RefreshHasPrevNext();
        }
		

        private ICommand _previouspanoramaMicrosoft_DetailVideos0;

        /// <summary>
        /// Gets the PreviouspanoramaMicrosoft_DetailVideos0 command.
        /// </summary>
        public ICommand PreviouspanoramaMicrosoft_DetailVideos0
        {
            get { return _previouspanoramaMicrosoft_DetailVideos0 = _previouspanoramaMicrosoft_DetailVideos0 ?? new ViewModelsBase.DelegateCommand(PreviouspanoramaMicrosoft_DetailVideos0Delegate); }
        }

        private async void RefreshHasPrevNext()
        {
            HasPreviouspanoramaMicrosoft_DetailVideos0 = _microsoft_microsoftvideos.HasPrevious(CurrentYouTubeVideo);
			HasNextpanoramaMicrosoft_DetailVideos0 = await _microsoft_microsoftvideos.HasNext(CurrentYouTubeVideo);
			LoadingCurrentYouTubeVideo = false;
		}
		public object NavigationContext
        {
            set
            {              
                if (!(value is EntitiesBase.YouTubeVideo)) { return; }
                
                CurrentYouTubeVideo = value as EntitiesBase.YouTubeVideo;
                RefreshHasPrevNext();
            }
        }
        /// <summary>
        /// Initializes a <see cref="Services.TileInfo" /> object for the Microsoft_DetailVideosStaticControl control.
        /// </summary>
		/// <returns>A <see cref="Services.TileInfo" /> object.</returns>
        public Services.TileInfo CreateTileInfoMicrosoft_DetailVideosStaticControl()
        {
            var tileInfo = new Services.TileInfo
            {
                CurrentId = CurrentYouTubeVideo.VideoId,
                Title = CurrentYouTubeVideo.Title,
                BackTitle = CurrentYouTubeVideo.Title,
                BackContent = CurrentYouTubeVideo.Summary,
                Count = 0,
                BackgroundImagePath = CurrentYouTubeVideo.VideoImageUrl,
                BackBackgroundImagePath = CurrentYouTubeVideo.VideoImageUrl,
                LogoPath = "Logo-a947df9b-f574-4979-841c-e966c0554915.png"
            };
            return tileInfo;
        }
    }
}
