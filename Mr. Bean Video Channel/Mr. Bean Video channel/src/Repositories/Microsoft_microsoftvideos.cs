// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   	DataSource.tt
// Version:		2.0
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using EntitiesBase=WPAppStudio.Entities.Base;
using IServices=WPAppStudio.Services.Interfaces;
using RepositoriesBase=WPAppStudio.Repositories.Base;
using WPAppStudio.Shared;

namespace WPAppStudio.Repositories
{
    /// <summary>
    /// YouTube data source.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public class Microsoft_microsoftvideos : IMicrosoft_microsoftvideos 
    {
		private static bool AlreadyAccessed = false;
        private readonly RepositoriesBase.IYoutubeDataSource _youtubeDataSource; 
	    private IServices.IStorageService _storageService;
        private IServices.IInternetService _internetService;
		private const int MaxResults = 10;
		
		private const string YoutubeBaseUrl = "https://gdata.youtube.com/feeds/api/videos?q={0}&orderby=published&safeSearch=strict&format=5&v=2";
		private const string YoutubeQuery = @"Mr. Bean Videos";
		private const string YoutubePaginationParameters = "&start-index={1}&max-results={2}";

        /// <summary>
        /// Initializes a new instance of the <see cref="Microsoft_microsoftvideos" /> class.
        /// </summary>
        /// <param name="youtubeDataSource">A Youtube data source.</param>
		/// <param name="internetService">Internet service.</param>
        /// <param name="storageService">Storage service.</param>
        public Microsoft_microsoftvideos(RepositoriesBase.IYoutubeDataSource youtubeDataSource, IServices.IInternetService internetService, IServices.IStorageService storageService)
        {
            _youtubeDataSource = youtubeDataSource;
		    _storageService = storageService;
            _internetService = internetService;
        }

        /// <summary>
        /// Retrieves the data from Youtube (query: Mr. Bean Videos ), in an observable collection of YouTubeVideo items.
        /// </summary>
        /// <returns>An observable collection of YouTubeVideo items.</returns>
        public async Task<ObservableCollection<EntitiesBase.YouTubeVideo>> GetData(int numPage)
        {
			if(!AlreadyAccessed)
			{
				AlreadyAccessed = true;
				return await Refresh();
			}
			
            return await LoadData(numPage);
        }

        /// <summary>
        /// Refresh the data from Youtube (query: Mr. Bean Videos ), in an observable collection of YouTubeVideo items.
        /// </summary>
        /// <returns>An observable collection of YouTubeVideo items.</returns>
        public async Task<ObservableCollection<EntitiesBase.YouTubeVideo>> Refresh()
        {
			return await LoadData(0, true);
        }
				
		/// <summary>
        /// Retrieves the data from Youtube (query: Mr. Bean Videos ), filtered by a filter specification, in an observable collection of YouTubeVideo items.
        /// </summary>
		/// <param name="filter">Filter operation specification</param>
        /// <returns>An observable collection of YouTubeVideo items.</returns>
        public async Task<ObservableCollection<EntitiesBase.YouTubeVideo>> Search(FilterSpecification filter)
        {
			var data = _storageService.Load<EntitiesBase.YouTubeVideo[]>("Microsoft_microsoftvideos");
			var searchResults = RepositoriesBase.Filter<EntitiesBase.YouTubeVideo>.FilterCollection(filter, data);
			if(searchResults == null || !searchResults.Any())
			{
				data = await _youtubeDataSource.LoadRemote<EntitiesBase.YouTubeVideo[]>(String.Format(YoutubeBaseUrl, HttpUtility.UrlEncode(YoutubeQuery)));
				searchResults = RepositoriesBase.Filter<EntitiesBase.YouTubeVideo>.FilterCollection(filter, data);
			}
            return searchResults;
        }
		
		/// <summary>
        /// Checks if data source has a element before the passed as parameter
        /// </summary>
		/// <param name="current">Current element</param>
        /// <returns>True, if there is a previous element, false if there is not</returns>
		public bool HasPrevious(EntitiesBase.YouTubeVideo current)
        {
			var data = _storageService.Load<ObservableCollection<EntitiesBase.YouTubeVideo>>("Microsoft_microsoftvideos");
			
            if (current == null || !data.Any()) return false;

            return data.IndexOf(current) > 0;
        }
		
		/// <summary>
        /// Checks if data source has a element after the passed as parameter
        /// </summary>
		/// <param name="current">Current element</param>
        /// <returns>True, if there is a next element, false if there is not</returns>
		public async Task<bool> HasNext(EntitiesBase.YouTubeVideo current)
        {
			var data = _storageService.Load<ObservableCollection<EntitiesBase.YouTubeVideo>>("Microsoft_microsoftvideos");
			
            if (current == null || !data.Any()) return false;

            if(data.IndexOf(current) < data.Count - 1) return true;
			
			var nextPageData = await GetData((int)Math.Ceiling(data.Count / (double)MaxResults));

		    return nextPageData.Any();
        }
		
		/// <summary>
        /// Retrieves the previous element from source.
        /// </summary>
		/// <param name="current">Current element</param>
        /// <returns>The previous element from items, if it exists. Otherwise, returns null</returns>
        public EntitiesBase.YouTubeVideo Previous(EntitiesBase.YouTubeVideo current)
        {
			var data = _storageService.Load<ObservableCollection<EntitiesBase.YouTubeVideo>>("Microsoft_microsoftvideos");
		
            if (current == null || !data.Any()) return null;

            var index = data.IndexOf(current);

            if (index == -1 || index == 0) return null;

            return data[index - 1];
        }
		
		/// <summary>
        /// Retrieves the next element from source.
        /// </summary>
		/// <param name="current">Current element</param>
        /// <returns>The next element from items, if it exists. Otherwise, returns null</returns>
        public async Task<EntitiesBase.YouTubeVideo> Next(EntitiesBase.YouTubeVideo current)
        {
            var data = _storageService.Load<ObservableCollection<EntitiesBase.YouTubeVideo>>("Microsoft_microsoftvideos");
			
            if (current == null || !data.Any()) return null;

            var index = data.IndexOf(current);
			
			if (index == -1) return null;

		    if (index != data.Count - 1) return data[index + 1];

		    var nextPageData = await GetData((int)Math.Ceiling(data.Count / (double)MaxResults));

		    if (!nextPageData.Any()) return null;

		    return nextPageData.First();
        }

        private async Task<ObservableCollection<EntitiesBase.YouTubeVideo>> LoadData(int pageNumber, bool forceRecaching = false)
        {
			var storedItems = _storageService.Load<ObservableCollection<EntitiesBase.YouTubeVideo>>("Microsoft_microsoftvideos");
			var storedCollection = storedItems != null ? storedItems.ToList() : new List<EntitiesBase.YouTubeVideo>();
			
            var pageNotSaved = Math.Ceiling(storedCollection.Count() / (double)MaxResults) - 1 < pageNumber;
			
            if (_internetService.IsNetworkAvailable() && (pageNotSaved || forceRecaching))
            {
				var newItems = await _youtubeDataSource.LoadRemote<IEnumerable<EntitiesBase.YouTubeVideo>>(String.Format(YoutubeBaseUrl + YoutubePaginationParameters, HttpUtility.UrlEncode(YoutubeQuery), pageNumber * MaxResults + 1, MaxResults));

                if (forceRecaching)
                    storedCollection = new List<EntitiesBase.YouTubeVideo>();

                if(newItems != null && newItems.Any())
				{
					storedCollection.AddRange(newItems);
					_storageService.Save("Microsoft_microsoftvideos", new ObservableCollection<EntitiesBase.YouTubeVideo>(storedCollection));
				}
			}
			
			return new ObservableCollection<EntitiesBase.YouTubeVideo>(storedCollection.Skip(pageNumber * MaxResults).Take(MaxResults));
        }
	}
}

